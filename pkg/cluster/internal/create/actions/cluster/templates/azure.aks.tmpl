---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  name: "{{ .Descriptor.ClusterID }}"
  namespace: "cluster-{{ .Descriptor.ClusterID }}"
spec:
  clusterNetwork:
    pods:
      cidrBlocks: ["192.168.0.0/16"]
  controlPlaneRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureManagedControlPlane
    name: "{{ .Descriptor.ClusterID }}-control-plane"
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureManagedCluster
    name: "{{ .Descriptor.ClusterID }}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureManagedCluster
metadata:
  name: "{{ .Descriptor.ClusterID }}"
  namespace: "cluster-{{ .Descriptor.ClusterID }}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureManagedControlPlane
metadata:
  name: "{{ .Descriptor.ClusterID }}-control-plane"
  namespace: "cluster-{{ .Descriptor.ClusterID }}"
spec:
  identityRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureClusterIdentity
    name: ${CLUSTER_IDENTITY_NAME}
  location: ${AZURE_LOCATION}
  resourceGroupName: ${AZURE_RESOURCE_GROUP:=${CLUSTER_NAME}}
  sshPublicKey: ${AZURE_SSH_PUBLIC_KEY_B64:=""}
  subscriptionID: ${AZURE_SUBSCRIPTION_ID}
  version: "{{ .Descriptor.K8SVersion }}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureClusterIdentity
metadata:
  labels:
    clusterctl.cluster.x-k8s.io/move-hierarchy: "true"
  name: ${CLUSTER_IDENTITY_NAME}
  namespace: default
spec:
  allowedNamespaces: {}
  clientID: ${AZURE_CLIENT_ID}
  clientSecret:
    name: ${AZURE_CLUSTER_IDENTITY_SECRET_NAME}
    namespace: ${AZURE_CLUSTER_IDENTITY_SECRET_NAMESPACE}
  tenantID: ${AZURE_TENANT_ID}
  type: ServicePrincipal
{{- range $node := .Descriptor.WorkerNodes }}
{{- range $index, $n := loop .AZ .ZoneDistribution .Quantity .NodeGroupMaxSize .NodeGroupMinSize }}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
{{- if and (gt $node.NodeGroupMaxSize 0) (gt $node.NodeGroupMinSize 0) }}
  annotations:
    cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '{{ $n.MaxSize }}'
    cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '{{ $n.MinSize }}'
{{- end }}
  name: "{{ $node.Name }}-md-{{ $index }}"
  namespace: "cluster-{{ $.Descriptor.ClusterID }}"
spec:
  clusterName: "{{ $.Descriptor.ClusterID }}"
  replicas: {{ $n.QA }}
  selector:
    matchLabels:
  template:
    metadata:
      labels:
        keos.stratio.com/machine-role: "{{ $.Descriptor.ClusterID }}-worker-node"
    spec:
      clusterName: "{{ $.Descriptor.ClusterID }}"
      version: "{{ $.Descriptor.K8SVersion }}"
      failureDomain: "{{- if $node.AZ -}} {{ $n.AZ }} {{- else -}} {{ $.Descriptor.Region }}{{ $n.AZ }} {{- end }}"
      bootstrap:
        configRef:
          name: "{{ $node.Name }}-md-{{ $index }}"
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: EKSConfigTemplate
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureMachineTemplate
        name: "{{ $node.Name }}-md-{{ $index }}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name: "{{ $node.Name }}-md-{{ $index }}"
  namespace: "cluster-{{ $.Descriptor.ClusterID }}"
spec:
  template:
    spec:
      osDisk:
        diskSizeGB: 128
        osType: Linux
      sshPublicKey: ${AZURE_SSH_PUBLIC_KEY_B64:=""}
      vmSize: ${AZURE_NODE_MACHINE_TYPE}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta2
kind: EKSConfigTemplate
metadata:
  name: "{{ $node.Name }}-md-{{ $index }}"
  namespace: "cluster-{{ $.Descriptor.ClusterID }}"
spec:
  template:
    spec:
      {{- if $node.ExtraVolumes }}
      diskSetup:
        filesystems:
          {{- range $index, $vol := $node.ExtraVolumes }}
          - device: /dev/nvme{{ len (printf "a%*s" $index "") }}n1
            filesystem: xfs
            label: {{ $vol.Label }}
          {{- end }}
        partitions:
          {{- range $index, $vol := $node.ExtraVolumes }}
          - device: /dev/nvme{{ len (printf "a%*s" $index "") }}n1
            layout: true
            overwrite: false
            tableType: gpt
          {{- end }}
      mounts:
        {{- range $index, $vol := $node.ExtraVolumes }}
        - - /dev/nvme{{ len (printf "a%*s" $index "") }}n1
          - {{ $vol.MountPath }}
        {{- end }}
      {{- end }}
      {{- if $node.Labels }}
      kubeletExtraArgs:
        node-labels: \"{{ range $key, $value := $node.Labels }}{{ $key }}={{ $value }},{{- end }}\"
      {{- end }}
{{- end }}
{{- end }}
