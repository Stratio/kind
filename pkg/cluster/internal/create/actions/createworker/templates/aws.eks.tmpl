---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  name: "{{ .KeosCluster.Metadata.Name }}"
  namespace: "cluster-{{ .KeosCluster.Metadata.Name }}"
spec:
  clusterNetwork:
    pods:
      cidrBlocks: [\"192.168.0.0/16\"]
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta2
    kind: AWSManagedControlPlane
    name: "{{ .KeosCluster.Metadata.Name }}-control-plane"
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
    kind: AWSManagedCluster
    name: "{{ .KeosCluster.Metadata.Name }}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
kind: AWSManagedCluster
metadata:
  name: "{{ .KeosCluster.Metadata.Name }}"
  namespace: "cluster-{{ .KeosCluster.Metadata.Name }}"
spec: {}
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta2
kind: AWSManagedControlPlane
metadata:
  name: "{{ .KeosCluster.Metadata.Name }}-control-plane"
  namespace: "cluster-{{ .KeosCluster.Metadata.Name }}"
spec:
  additionalTags:
    "keos.stratio.com/owner": \"{{ .KeosCluster.Metadata.Name }}\"
  {{- range .KeosCluster.Spec.ControlPlane.Tags }}
    {{- range $key, $value := . }}
    {{ $key }}: \"{{ $value }}\"
    {{- end }}
  {{- end }}
  addons:
    - name: "vpc-cni"
      version: "v1.12.6-eksbuild.2"
      conflictResolution: "overwrite"
    - name: "aws-ebs-csi-driver"
      version: "v1.19.0-eksbuild.2"
      conflictResolution: "overwrite"
    - name: "coredns"
      version: "v1.9.3-eksbuild.3"
      conflictResolution: "overwrite"
    - name: "kube-proxy"
      version: "v1.24.10-eksbuild.2"
      conflictResolution: "overwrite"
  associateOIDCProvider: {{ .KeosCluster.Spec.ControlPlane.AWS.AssociateOIDCProvider }}
  eksClusterName: "{{ .KeosCluster.Metadata.Name }}"
  logging:
    apiServer: {{ .KeosCluster.Spec.ControlPlane.AWS.Logging.ApiServer }}
    audit: {{ .KeosCluster.Spec.ControlPlane.AWS.Logging.Audit }}
    authenticator: {{ .KeosCluster.Spec.ControlPlane.AWS.Logging.Authenticator }}
    controllerManager: {{ .KeosCluster.Spec.ControlPlane.AWS.Logging.ControllerManager }}
    scheduler: {{ .KeosCluster.Spec.ControlPlane.AWS.Logging.Scheduler }}
{{- if ne .KeosCluster.Spec.Networks.VPCID "" }}
  network:
    vpc:
      id: {{ .KeosCluster.Spec.Networks.VPCID }}
  {{- if gt (len .KeosCluster.Spec.Networks.Subnets) 0 }}
    subnets:
    {{- range .KeosCluster.Spec.Networks.Subnets }}
      - id: {{ .SubnetId }}
    {{- end }}
    {{- if gt (len .KeosCluster.Spec.Networks.PodsSubnets) 0 }}
      {{- range .KeosCluster.Spec.Networks.PodsSubnets }}
      - id: {{ .SubnetId }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
  region: "{{ .KeosCluster.Spec.Region }}"
{{- if ne .KeosCluster.Spec.Networks.PodsCidrBlock "" }}
  secondaryCidrBlock: {{ .KeosCluster.Spec.Networks.PodsCidrBlock }}
{{- end }}
  sshKeyName: \"{{ .KeosCluster.Spec.Bastion.SSHKey }}\"
  version: "{{ .KeosCluster.Spec.K8SVersion }}"
  vpcCni:
    env:
      - name: ANNOTATE_POD_IP
        value: \"true\"
    {{- if ne .KeosCluster.Spec.Networks.PodsCidrBlock "" }}
      - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
        value: \"true\"
      - name: ENI_CONFIG_LABEL_DEF
        value: \"topology.kubernetes.io/zone\"
    {{- end }}
{{- if ne .KeosCluster.Spec.ControlPlane.AWS.EncryptionKey "" }}
  encryptionConfig:
    provider: \"{{ .KeosCluster.Spec.ControlPlane.AWS.EncryptionKey }}\"
    resources:
      - secrets
{{- end }}
{{- range $node := .KeosCluster.Spec.WorkerNodes }}
{{- range $index, $n := loop .AZ .ZoneDistribution .Quantity .NodeGroupMaxSize .NodeGroupMinSize }}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
{{- if gt $node.NodeGroupMaxSize 0 }}
  annotations:
    cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '{{ $n.MaxSize }}'
    cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '{{ $n.MinSize }}'
{{- end }}
  name: "{{ $node.Name }}-md-{{ $index }}"
  namespace: "cluster-{{ $.KeosCluster.Metadata.Name }}"
spec:
  clusterName: "{{ $.KeosCluster.Metadata.Name }}"
  replicas: {{ $n.QA }}
  selector:
    matchLabels:
  template:
    metadata:
      labels:
        keos.stratio.com/machine-role: "{{ $.KeosCluster.Metadata.Name }}-worker-node"
    spec:
      clusterName: "{{ $.KeosCluster.Metadata.Name }}"
      version: "{{ $.KeosCluster.Spec.K8SVersion }}"
      failureDomain: "{{ $n.AZ }}"
      bootstrap:
        configRef:
          name: "{{ $node.Name }}-md-{{ $index }}"
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta2
          kind: EKSConfigTemplate
      infrastructureRef:
        name: "{{ $node.Name }}-md-{{ $index }}"
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
        kind: AWSMachineTemplate
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
kind: AWSMachineTemplate
metadata:
  name: "{{ $node.Name }}-md-{{ $index }}"
  namespace: "cluster-{{ $.KeosCluster.Metadata.Name }}"
spec:
  template:
    spec:
      {{- if $node.Spot }}
      spotMarketOptions:
        maxPrice: \"\"
      {{- end }}
      {{- if ne $node.NodeImage "" }}
      ami:
        id: {{ $node.NodeImage }}
      {{- end }}
      iamInstanceProfile: "nodes.cluster-api-provider-aws.sigs.k8s.io"
      instanceType: "{{ $node.Size }}"
      sshKeyName: \"{{ $node.SSHKey }}\"
      rootVolume:
        size: {{- if $node.RootVolume.Size }} {{ $node.RootVolume.Size }} {{ else }} 30 {{ end }}
        {{- if $node.RootVolume.Type }}
        type: {{ $node.RootVolume.Type }}
        {{- end }}
        encrypted: {{ $node.RootVolume.Encrypted }}
        {{- if $node.RootVolume.EncryptionKey }}
        encryptionKey: {{ $node.RootVolume.EncryptionKey }}
        {{- end }}
      {{- if $node.ExtraVolumes }}
      nonRootVolumes:
        {{- range $index, $vol := $node.ExtraVolumes }}
        - deviceName: {{ $vol.DeviceName }}
          size: {{ $vol.Size }}
          type: {{ $vol.Type }}
          encrypted: {{ $vol.Encrypted }}
          {{- if $vol.EncryptionKey }}
          encryptionKey: {{ $vol.EncryptionKey }}
          {{- end }}
        {{- end }}
      {{- end }}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta2
kind: EKSConfigTemplate
metadata:
  name: "{{ $node.Name }}-md-{{ $index }}"
  namespace: "cluster-{{ $.KeosCluster.Metadata.Name }}"
spec:
  template:
    spec:
      {{- if gt (len $.DockerRegistries) 0 }}
      files:
        {{- range $reg := $.DockerRegistries }}
        {{- $url := hostname $reg.url }}
        - content: |
            server = \"https://{{ $url }}\"
            [host.\"https://{{ $url }}\"]
              capabilities = [\"pull\", \"resolve\"]
              [host.\"https://{{ $url }}\".header]
                {{- $auth := base64 (print $reg.user ":" $reg.pass) }}
                authorization = \"Basic {{ $auth }}\"
          path: /etc/containerd/certs.d/{{ $url }}/hosts.toml
        {{- end }}
      postBootstrapCommands:
        - systemctl restart containerd
      {{- end }}
      {{- if $node.ExtraVolumes }}
      diskSetup:
        filesystems:
          {{- range $index, $vol := $node.ExtraVolumes }}
          - device: /dev/nvme{{ len (printf "a%*s" $index "") }}n1
            filesystem: xfs
            label: {{ $vol.Label }}
          {{- end }}
        partitions:
          {{- range $index, $vol := $node.ExtraVolumes }}
          - device: /dev/nvme{{ len (printf "a%*s" $index "") }}n1
            layout: true
            overwrite: false
            tableType: gpt
          {{- end }}
      mounts:
        {{- range $index, $vol := $node.ExtraVolumes }}
        - - /dev/nvme{{ len (printf "a%*s" $index "") }}n1
          - {{ $vol.MountPath }}
        {{- end }}
      {{- end }}
      {{- if or (gt (len $node.Labels) 0) (gt (len $node.Taints) 0) }}
      kubeletExtraArgs:
        {{- if gt (len $node.Labels) 0 }}
        node-labels: \"{{ range $key, $value := $node.Labels }}{{ $key }}={{ $value }},{{- end }}\"
        {{- end }}
        {{- if gt (len $node.Taints) 0 }}
        register-with-taints: \"{{ range $i, $taint := $node.Taints }}{{$taint}}{{- if ne $i (sub (len $node.Taints) 1) }},{{- end }}{{ end }}\"
        {{- end }}
      {{- end }}
{{- end }}
{{- end }}
