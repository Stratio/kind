apiVersion: installer.stratio.com/v1beta1
kind: KeosCluster
metadata:
    name: {{ $.Metadata.Name }}
    namespace: cluster-{{ $.Metadata.Name }}
spec:
    deploy_autoscaler: {{ $.Spec.DeployAutoscaler }}
    {{- if checkReference $.Spec.Bastion }}
    bastion:
    {{- if ne $.Spec.Bastion.NodeImage "" }}
      node_image: {{ $.Spec.Bastion.NodeImage }}
    {{- end }}
    {{- if ne $.Spec.Bastion.VMSize "" }}
      vm_size: {{ $.Spec.Bastion.VMSize }}
    {{- end }}
    {{- if ne $.Spec.Bastion.AllowedCIDRBlocks "" }}
      allowedCIDRBlocks: {{ $.Spec.Bastion.AllowedCIDRBlocks }}
    {{- end }}
    {{- if ne $.Spec.Bastion.SSHKey "" }}
      ssh_key: {{ $.Spec.Bastion.SSHKey }}
    {{- end }}
    {{- end }}
    {{- if or ( checkReference $.Spec.StorageClass.Parameters ) ( ne $.Spec.StorageClass.Class "" ) ( ne $.Spec.StorageClass.EncryptionKey "") ( checkReference $.Spec.StorageClass.EFS ) }}
    storageclass:
      {{- if checkReference $.Spec.StorageClass.EFS }}
      efs:
        {{- if ne $.Spec.StorageClass.EFS.Name "" }}
        name: {{ $.Spec.StorageClass.EFS.Name }}
        {{- end }}
        {{- if ne $.Spec.StorageClass.EFS.ID "" }}
        id: {{ $.Spec.StorageClass.EFS.ID }}
        {{- end }}
        {{- if ne $.Spec.StorageClass.EFS.Permissions "" }}
        permissions: {{ $.Spec.StorageClass.EFS.Permissions }}
        {{- end }}
      {{- end }}
      {{- if ne $.Spec.StorageClass.EncryptionKey "" }}
      encryptionKey: {{ $.Spec.StorageClass.EncryptionKey }}
      {{- end }}
      {{- if ne $.Spec.StorageClass.Class "" }}
      class: {{ $.Spec.StorageClass.Class }}
      {{- end }}
      {{- if isNotEmpty $.Spec.StorageClass.Parameters }}
      parameters:
      {{- range $key,$value := getSCParameters $.Spec.StorageClass.Parameters  }}
        {{ $key }}: {{ $value }}
      {{- end }}
      {{- end }}
    {{- end }}
    {{- if or ( ne $.Spec.Credentials.GithubToken "") ( ne $.Spec.Credentials.AWS.AccessKey) ( ne $.Spec.Credentials.GCP.project_id) ( isNotEmpty  $.Spec.Credentials.DockerRegistries) }}
    credentials:
      {{- if ne $.Spec.Credentials.AZURE.ClientID "" }}
      azure:
        subscription_id: {{ $.Spec.Credentials.AZURE.SubscriptionID }}
        tenant_id: {{ $.Spec.Credentials.AZURE.TenantID }}
        client_id: {{ $.Spec.Credentials.AZURE.ClientID }}
        client_secret: {{ $.Spec.Credentials.AZURE.ClientSecret }}
      {{- end }}
      {{- if ne $.Spec.Credentials.AWS.AccessKey "" }}
      aws:
        aws_access_key_id: {{ $.Spec.Credentials.AWS.AccessKey }}
        aws_secret_access_key: {{ $.Spec.Credentials.AWS.SecretKey }}
        region: {{ $.Spec.Credentials.AWS.Region }}
        aws_account_id: {{ $.Spec.Credentials.AWS.Account }}
      {{- end }}
      {{- if ne $.Spec.Credentials.GCP.ClientID "" }}
      gcp:
        project_id: {{ $.Spec.Credentials.GCP.ProjectID }}
        private_key_id: {{ $.Spec.Credentials.GCP.PrivateKeyID }}
        private_key: {{ $.Spec.Credentials.GCP.PrivateKey }}
        client_email: {{ $.Spec.Credentials.GCP.ClientEmail }}
        client_id: {{ $.Spec.Credentials.GCP.ClientID }}
      {{- end }}
      {{- if ne $.Spec.Credentials.GithubToken "" }}
      github_token: {{ $.Spec.Credentials.GithubToken }}
      {{- end }}
      {{- if isNotEmpty  $.Spec.Credentials.DockerRegistries }}
      docker_registries:
      {{- range $.Spec.Credentials.DockerRegistries }}
      - url: {{ .URL }}
        user:  {{ .User }}
        pass: {{ .Pass }}
      {{- end }}
      {{- end }}
    {{- end }}
    infra_provider: {{ $.Spec.InfraProvider }}
    k8s_version:  {{ $.Spec.K8SVersion }}
    region: {{ $.Spec.Region }}
    {{- if checkReference $.Spec.Networks }}
    networks:
      {{- if ne $.Spec.Networks.VPCID "" }}
      vpc_id: {{ $.Spec.Networks.VPCID }}
      {{- end }}
      {{- if ne $.Spec.Networks.VPCCidrBlock "" }}
      vpc_cidr: {{ $.Spec.Networks.VPCCidrBlock }}
      {{- end }}
      {{- if ne $.Spec.Networks.PodsCidrBlock "" }}
      pods_cidr: {{ $.Spec.Networks.PodsCidrBlock }}
      {{- end }}
      {{- if ne $.Spec.Networks.ResourceGroup "" }}
      resource_group: {{ $.Spec.Networks.ResourceGroup }}
      {{- end }}
      {{- if isNotEmpty $.Spec.Networks.PodsSubnets }}
      pods_subnets:
      {{- range $.Spec.Networks.PodsSubnets }}
      - subnet_id: {{ .SubnetId }}
        {{- if ne .CidrBlock "" }}
        cidrBlock:  {{ .CidrBlock }} 
        {{- end }}
        {{- if ne .Role "" }}
        role:  {{ .Role }} 
        {{- end }}
      {{- end }}
      {{- end }}
      {{- if isNotEmpty $.Spec.Networks.Subnets }}
      subnets:
      {{- range $.Spec.Networks.subnets }}
      - subnet_id: {{ .SubnetId }}
        {{- if ne .CidrBlock "" }}
        cidrBlock:  {{ .CidrBlock }} 
        {{- end }}
        {{- if ne .Role "" }}
        role:  {{ .Role }} 
        {{- end }}
      {{- end }}
      {{- end }}
    {{- end }}
    {{- if checkReference $.Spec.Dns.ManageZone }}
    dns:
      manage_zone: {{ $.Spec.Dns.ManageZone }}
    {{- end }}
    {{- if isNotEmpty $.Spec.DockerRegistries }}
    docker_registries:
    {{- range $.Spec.DockerRegistries }}
    - url: {{ .URL }}
      auth_required: {{ .AuthRequired }} 
      type: {{ .Type }}
      keos_registry: {{ .KeosRegistry }}
    {{- end }}
    {{- end }}
    {{- if ne $.Spec.ExternalDomain "" }}
    external_domain: {{ $.Spec.ExternalDomain }}
    {{- end }}
    {{- if or (ne $.Spec.Security.NodesIdentity "") ($.Spec.Security.AWS.CreateIAM) }}
    security:
      {{- if ne $.Spec.Security.NodesIdentity "" }}
      nodes_identity: {{ $.Spec.Security.NodesIdentity }}
      {{- end }}
      {{- if $.Spec.Security.AWS.CreateIAM }}
      aws:
        create_iam: {{ $.Spec.Security.AWS.CreateIAM }}
      {{- end }}
    {{- end }}
    control_plane:
      managed: {{ $.Spec.ControlPlane.Managed }}
      {{- if ne $.Spec.ControlPlane.Name "" }}
      name: {{ $.Spec.ControlPlane.Name }}
      {{- end }}
      {{- if ne $.Spec.ControlPlane.NodeImage "" }}
      node_image: {{ $.Spec.ControlPlane.NodeImage }}
      {{- end }}
      {{- if not $.Spec.ControlPlane.Managed }}
      highly_available: {{ $.Spec.ControlPlane.HighlyAvailable }}
      size: {{ $.Spec.ControlPlane.Size }}
      {{- if ne $.Spec.ControlPlane.RootVolume.Type "" }}
      root_volume: 
        size: {{ $.Spec.ControlPlane.RootVolume.Size }}
        type: {{ $.Spec.ControlPlane.RootVolume.Type }}
        encrypted: {{ $.Spec.ControlPlane.RootVolume.Encrypted }}
        {{- if ne $.Spec.ControlPlane.RootVolume.EncryptionKey "" }}
        encryption_key: {{ $.Spec.ControlPlane.RootVolume.EncryptionKey }}
        {{- end }}
      {{- end }}
      {{- end }}
      {{- if checkProvider "azure" $.Spec.InfraProvider }}
      azure:
        tier: {{ $.Spec.ControlPlane.Azure.Tier }}
      {{- end }}
      {{- if checkProvider "aws" $.Spec.InfraProvider}}
      {{- if $.Spec.ControlPlane.AWS.AssociateOIDCProvider }}
      aws:
        associate_oidc_provider: {{ $.Spec.ControlPlane.AWS.AssociateOIDCProvider }}
        logging:
          api_server: {{ $.Spec.ControlPlane.AWS.Logging.ApiServer }}
          audit: {{ $.Spec.ControlPlane.AWS.Logging.Audit }}
          authenticator: {{ $.Spec.ControlPlane.AWS.Logging.Authenticator }}
          controller_manager: {{ $.Spec.ControlPlane.AWS.Logging.ControllerManager }}
          scheduler: {{ $.Spec.ControlPlane.AWS.Logging.Scheduler }}
      {{- end }}
      {{- end }}
      {{- if isNotEmpty $.Spec.ControlPlane.Tags}}
      tags:
      {{- range $.Spec.ControlPlane.Tags }}
      {{- range $key,$value := . }}
        {{ $key }}: {{ $value }}
      {{- end }}
      {{- end }}
      {{- end }}
      {{- if isNotEmpty $.Spec.ControlPlane.ExtraVolumes }}
      extra_volumes:
      {{- range $.Spec.ControlPlane.ExtraVolumes }}
      -  device_name: {{ .DeviceName }}
         name:  {{ .Name }}
         size: {{ .Size }}
         type: {{ .Type }}
         mount_path: {{ .MountPath }}
         encrypted: {{ .Encrypted }}
         label: {{ .Label }}
         encryption_key: {{ .EncryptionKey }}
      {{- end }}
      {{- end }}
    {{- if isNotEmpty $.Spec.WorkerNodes }}
    worker_nodes:
    {{- range $.Spec.WorkerNodes }}
    - name: {{ .Name }}
      {{- if ne .NodeImage "" }}
      node_image: {{ .NodeImage }}
      {{- end }}
      quantity: {{ .Quantity }}
      {{- if ne .Size "" }}
      size: {{ .Size }}
      {{- end }}
      zone_distribution: {{ .ZoneDistribution }}
      {{- if ne .AZ "" }}
      az: {{ .AZ }}
      {{- end }}
      {{- if ne .SSHKey "" }}
      ssh_key: {{ .SSHKey }}
      {{- end }}
      spot: {{ .Spot }}
      max_size: {{ .NodeGroupMaxSize }}
      min_size: {{ .NodeGroupMinSize }}
      {{- if ne .RootVolume.Type "" }}
      root_volume: 
        size: {{ .RootVolume.Size }}
        type: {{ .RootVolume.Type }}
        encrypted: {{ .RootVolume.Encrypted }}
        {{- if ne .RootVolume.EncryptionKey "" }}
        encryption_key: {{ .RootVolume.EncryptionKey }}
        {{- end }}
      {{- end }}
      {{- if isNotEmpty .ExtraVolumes }}
      extra_volumes:
      {{- range .ExtraVolumes }}
      -  device_name: {{ .DeviceName }}
         size: {{ .Size }}
         type: {{ .Type }}
         mount_path: {{ .MountPath }}
         encrypted: {{ .Encrypted }}
         label: {{ .Label }}
      {{- end }}
      {{- end }}
      {{- if isNotEmpty .Labels }}
      labels:
      {{- range $key,$value := .Labels }}
        {{ $key }}: "{{ $value }}"
      {{- end }}
      {{- end }}
    {{- end }}
    {{- end }}
    